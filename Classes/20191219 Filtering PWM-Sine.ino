// Generates a 38.5kHz PWM signal with duty cycles that correspond to a sine wave
// After adequate low pass filtering the output will be a good approximation of a sine wave
//
// Various look-up tables exist below, each corresponding to a different frequency sine wave
// To choose one:
//   Comment out all of the following lines except the pair you want to use:

// 60Hz sine wave
#define LOOKUP_TABLE sinPWM60
#define NUM_ELEMENTS 522

// 120Hz sine wave
//#define LOOKUP_TABLE sinPWM120
//#define NUM_ELEMENTS 260

// 240Hz sine wave
//#define LOOKUP_TABLE sinPWM240
//#define NUM_ELEMENTS 130

// 480Hz sine wave
//#define LOOKUP_TABLE sinPWM480
//#define NUM_ELEMENTS 64

// 960Hz sine wave
//#define LOOKUP_TABLE sinPWM960
//#define NUM_ELEMENTS 31

// 1920Hz sine wave
//#define LOOKUP_TABLE sinPWM1920
//#define NUM_ELEMENTS 15


int i=0;
int x=0;
int OK=0;

// 60Hz
// 523 elements
int sinPWM60[]={
127,129,130,132,133,135,136,138,139,141,142,144,145,147,148,150,151,153,155,156,158,159,160,162,163,
165,166,168,169,171,172,174,175,177,178,179,181,182,184,185,186,188,189,190,192,193,194,196,197,198,
199,201,202,203,204,206,207,208,209,210,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,
227,228,229,230,231,232,233,234,234,235,236,237,238,238,239,240,241,241,242,243,243,244,244,245,246,
246,247,247,248,248,249,249,250,250,250,251,251,251,252,252,252,253,253,253,253,254,254,254,254,254,
254,254,254,254,254,255,254,254,254,254,254,254,254,254,254,254,253,253,253,253,252,252,252,251,251,
251,250,250,250,249,249,248,248,247,247,246,246,245,244,244,243,243,242,241,241,240,239,238,238,237,
236,235,234,234,233,232,231,230,229,228,227,226,225,224,223,222,221,220,219,218,217,216,215,214,213,
212,210,209,208,207,206,204,203,202,201,199,198,197,196,194,193,192,190,189,188,186,185,184,182,181,
179,178,177,175,174,172,171,169,168,166,165,163,162,160,159,158,156,155,153,151,150,148,147,145,144,
142,141,139,138,136,135,133,132,130,129,127,125,124,122,121,119,118,116,115,113,112,110,109,107,106,
104,103,101,99,98,96,95,94,92,91,89,88,86,85,83,82,80,79,77,76,75,73,72,70,69,68,66,65,64,62,61,60,
58,57,56,55,53,52,51,50,48,47,46,45,44,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,
22,21,20,20,19,18,17,16,16,15,14,13,13,12,11,11,10,10,9,8,8,7,7,6,6,5,5,4,4,4,3,3,3,2,2,2,1,1,1,1,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,3,3,3,4,4,4,5,5,6,6,7,7,8,8,9,10,10,11,11,12,
13,13,14,15,16,16,17,18,19,20,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,
44,45,46,47,48,50,51,52,53,55,56,57,58,60,61,62,64,65,66,68,69,70,72,73,75,76,77,79,80,82,83,85,86,
88,89,91,92,94,95,96,98,99,101,103,104,106,107,109,110,112,113,115,116,118,119,121,122,124,125,125,125,125
};

//120Hz
// 262 elements
int sinPWM120[]={
127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,180,183,186,189,191,194,196,
199,201,204,206,209,211,213,216,218,220,222,224,226,228,230,231,233,235,236,238,239,241,242,243,245,
246,247,248,249,250,250,251,252,252,253,253,254,254,254,254,254,254,254,254,254,254,253,253,252,252,
251,250,250,249,248,247,246,245,243,242,241,239,238,236,235,233,231,230,228,226,224,222,220,218,216,
213,211,209,206,204,201,199,196,194,191,189,186,183,180,178,175,172,169,166,163,160,157,154,151,148,
145,142,139,136,133,130,127,124,121,118,115,112,109,106,103,100,97,94,91,88,85,82,79,76,74,71,68,65,
63,60,58,55,53,50,48,45,43,41,38,36,34,32,30,28,26,24,23,21,19,18,16,15,13,12,11,9,8,7,6,5,4,4,3,2,2,
1,1,0,0,0,0,0,0,0,0,0,0,1,1,2,2,3,4,4,5,6,7,8,9,11,12,13,15,16,18,19,21,23,24,26,28,30,32,34,36,38,
41,43,45,48,50,53,55,58,60,63,65,68,71,74,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121
};

// 240Hz
// 131 Elements
int sinPWM240[]={
127,133,139,145,151,157,163,169,175,180,186,191,196,201,206,211,216,220,224,228,231,235,238,241,243,
246,248,250,251,252,253,254,254,254,254,254,253,252,250,249,247,245,242,239,236,233,230,226,222,218,
213,209,204,199,194,189,183,178,172,166,160,154,148,142,136,130,124,118,112,106,100,94,88,82,76,71,
65,60,55,50,45,41,36,32,28,24,21,18,15,12,9,7,5,4,2,1,0,0,0,0,0,1,2,3,4,6,8,11,13,16,19,23,26,30,34,
38,43,48,53,58,63,68,74,79,85,91,97,103,109,115,130,127,124,121,118,115,112,109,106,103,100,97,94,91,
88,85,82,79,76,74,71,68,65,63,60,58,55,53,50,48,45,43,41,38,36,34,32,30,28,26,24,23,21,19,18,16,15,13,
12,11,9,8,7,6,5,4,4,3,2,2,1,1,0,0,0,0,0,0,0,0,0,0,1,1,2,2,3,4,4,5,6,7,8,9,11,12,13,15,16,18,19,21,23,
24,26,28,30,32,34,36,38,41,43,45,48,50,53,55,58,60,63,65,68,71,74,76,79,82,85,88,91,94,97,100,103,106,
109,112,115,118,121
};

// 480Hz
// 65 Elements
int sinPWM480[]={
  127,139,151,163,175,186,197,207,216,224,232,238,244,248,251,254,254,254,253,250,246,241,235,228,220,
  212,202,192,181,169,158,145,133,121,109,96,85,73,62,52,42,34,26,19,13,8,4,1,0,0,0,3,6,10,16,22,30,38,
  47,57,68,79,91,103,115
};


// 960Hz
// 32 Elements
int sinPWM960[]={
127,151,174,196,215,231,243,251,254,253,247,237,223,206,185,163,139,115,91,69,48,31,17,7,1,0,3,11,23,39,58,80
};


// 1920Hz
// 16 Elements
int sinPWM1920[]={
127,176,217,245,255,245,217,176,127,78,37,9,0,9,37,78
};


void setup() {

pinMode(6,OUTPUT);

cli();// stop interrupts

TCCR0A=0; //reset
TCCR0B=0; //reset
TCNT0=0;  //reset

TCCR0A=0b10100001; //phase correct pwm mode
TCCR0B=0b00000001; //no prescaler
TCCR1A=0; //reset
TCCR1B=0; //reset
TCNT1=0;  //reset
OCR1A=509;// compare match value
TCCR1B=0b00001001; //WGM12 bit is 1 and no prescaler

TIMSK1 |=(1 << OCIE1A);

sei();// enable interrupts
}

ISR(TIMER1_COMPA_vect){// interrupt when timer 1 match with OCR1A value
  if(i>NUM_ELEMENTS)
    i=0;
  
  x=LOOKUP_TABLE[i];// x take the value from vector corresponding to position i(i is zero indexed)

  i=i+1;
  OCR0A=x;
}

void loop() {

}
